// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ONLINE
  AWAY
  DO_NOT_DISTURB
}

enum SubscriptionStatus {
  incomplete
  active
  past_due
  canceled
  incomplete_expired
  trialing
  paused
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  username  String?   @unique
  bio       String?
  status    UserStatus @default(ONLINE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password  Password?
  image     UserImage?
  Session   Session[]
  roles Role[]
  messages Message[]
  rooms Room[] @relation("RoomMembers")
  bookmarks Bookmark[]
  hiddenRooms HiddenRoom[]
  unreadMessages UnreadMessage[]
  subscription Subscription?
}

model Subscription{
  id String @id @default(cuid())
  polarSubscriptionId String @unique
  status SubscriptionStatus
  tierId String
  priceId String?
  cancelAtPeriodEnd Boolean @default(false)
  currentPeriodStart DateTime
  currentPeriodEnd DateTime
  startedAt DateTime
  endedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Password {
  hash String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id String @id @default(cuid())
  userId String
  expirationDate DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model UserImage {
  id        String   @id @default(cuid())
  altText   String?
  contentType String
  blob      Bytes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
}

model Message{
  id String @id @default(cuid())
  content String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId String?
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId String
  replyTo Message? @relation("Replies",fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId String?
  replies Message[] @relation("Replies") 
  bookmarks Bookmark[]
  isDeleted Boolean @default(false)

  image ChatImage?

  @@index(userId)
  @@index(roomId)
}

model ChatImage{
  id String @id @default(cuid())
  altText String?
  contentType String
  objectKey String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message Message? @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  messageId String @unique
}

model Bookmark{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  messageId String

  @@unique([userId, messageId])
}

model UnreadMessage{
  id String @id @default(cuid())
  count Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String

  @@unique([userId, roomId])
  @@index([userId])
}

model Room{
  id String @id @default(cuid())
  name String @unique
  icon String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages Message[]
  members User[] @relation("RoomMembers")
  hiddenBy HiddenRoom[]
  unreadMessages UnreadMessage[]
}

model HiddenRoom{
  id String @id @default(cuid())
  userId String
  roomId String
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
}


model Permission {
  id String @id @default(cuid())
  action String // create, read, update, delete
  entity String // user, note , post, comment, etc.
  access String // own or any etc.
  description String? @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action,entity,access])
}

model Role {
  id String @id @default(cuid())
  name String @unique
  description String? @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissions Permission[]
  users User[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}
