generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ONLINE
  AWAY
  DO_NOT_DISTURB
}

enum SubscriptionStatus {
  incomplete
  active
  past_due
  canceled
  incomplete_expired
  trialing
  paused
  complimentary
  unpaid
}

enum TradeDirection {
  LONG
  SHORT
}

enum TradeOutcome {
  WIN
  LOSS
  BREAKEVEN
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String?
  username       String?         @unique
  bio            String?
  status         UserStatus      @default(ONLINE)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  bookmarks      Bookmark[]
  hiddenRooms    HiddenRoom[]
  messages       Message[]
  password       Password?
  Session        Session[]
  subscription   Subscription?
  tradeEntries   TradeEntry[]
  unreadMessages UnreadMessage[]
  image          UserImage?
  roles          Role[]          @relation("RoleToUser")
  rooms          Room[]          @relation("RoomMembers")
}

model Subscription {
  id                  String             @id @default(cuid())
  polarSubscriptionId String?           @unique
  polarCustomerId     String?
  stripeSubscriptionId String?           @unique
  stripeCustomerId    String?
  status              SubscriptionStatus
  tierId              String
  priceId             String?
  cancelAtPeriodEnd   Boolean            @default(false)
  currentPeriodStart  DateTime?
  currentPeriodEnd    DateTime?
  startedAt           DateTime?
  endedAt             DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  userId              String             @unique
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id             String   @id @default(cuid())
  userId         String
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        String     @id @default(cuid())
  content   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String?
  roomId    String
  replyToId String?
  isDeleted Boolean    @default(false)
  bookmarks Bookmark[]
  image     ChatImage?
  replyTo   Message?   @relation("Replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Message[]  @relation("Replies")
  room      Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User?      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([roomId])
}

model ChatImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  objectKey   String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  messageId   String   @unique
  message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId])
}

model UnreadMessage {
  id        String   @id @default(cuid())
  count     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
  @@index([userId])
}

model Room {
  id             String          @id @default(cuid())
  name           String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  icon           String?
  sortOrder      Int?            @default(0)
  hiddenBy       HiddenRoom[]
  messages       Message[]
  unreadMessages UnreadMessage[]
  members        User[]          @relation("RoomMembers")
}

model HiddenRoom {
  id        String   @id @default(cuid())
  userId    String
  roomId    String
  createdAt DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
}

model Permission {
  id          String   @id @default(cuid())
  action      String
  entity      String
  access      String
  description String?  @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("PermissionToRole")

  @@unique([action, entity, access])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?      @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[] @relation("PermissionToRole")
  users       User[]       @relation("RoleToUser")
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  /// The type of verification, e.g. "email" or "phone"
  type      String
  /// The thing we're trying to verify, e.g. a user's email or phone number
  target    String
  /// The secret key used to generate the otp
  secret    String
  /// The algorithm used to generate the otp
  algorithm String
  /// The number of digits in the otp
  digits    Int
  /// The number of seconds the otp is valid for
  period    Int
  /// The valid characters for the otp
  charSet   String
  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model TradeEntry {
  id               String       @id @default(cuid())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  ticker           String
  direction        TradeDirection
  outcome          TradeOutcome
  tradeDate        DateTime
  entryPrice       Float?
  exitPrice        Float?
  positionSize     Float?
  pnl              Float?
  tradeThesis      String?
  executionQuality String?
  lessonsLearned   String?
  emotionalState   String?
  userId           String
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  images           TradeImage[]
  tags             TradeTag[]

  @@index([userId])
  @@index([ticker])
}

model TradeImage {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  objectKey    String     @unique
  caption      String?
  imageOrder   Int        @default(0)
  tradeEntryId String
  tradeEntry   TradeEntry @relation(fields: [tradeEntryId], references: [id], onDelete: Cascade)

  @@index([tradeEntryId])
}

enum TagType {
  STRATEGY
  SETUP
  EMOTION
  MISTAKE
  CONTEXT
}

model TradeTag {
  id           String     @id @default(cuid())
  tagName      String
  tagType      TagType
  tradeEntryId String
  tradeEntry   TradeEntry @relation(fields: [tradeEntryId], references: [id], onDelete: Cascade)

  @@unique([tradeEntryId, tagName, tagType])
  @@index([tradeEntryId])
}
